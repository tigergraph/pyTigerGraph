"""Authentication Functions

The functions on this page authenticate connections and manage TigerGraph credentials.
All functions in this module are called as methods on a link:https://docs.tigergraph.com/pytigergraph/current/core-functions/base[`TigerGraphConnection` object].
"""

import logging
import warnings
import requests

from typing import Union, Tuple, Dict

from pyTigerGraph.common.auth import (
    _parse_get_secrets,
    _parse_create_secret,
    _prep_token_request,
    _parse_token_response
)
from pyTigerGraph.common.exception import TigerGraphException
from pyTigerGraph.pyTigerGraphGSQL import pyTigerGraphGSQL


logger = logging.getLogger(__name__)


class pyTigerGraphAuth(pyTigerGraphGSQL):

    def getSecrets(self) -> Dict[str, str]:
        """Issues a `SHOW SECRET` GSQL statement and returns the secret generated by that
            statement.
            Secrets are unique strings that serve as credentials when generating authentication tokens.

        Returns:
            A dictionary of `alias: secret_string` pairs.

        Notes:
            This function returns the masked version of the secret. The original value of the secret cannot
            be retrieved after creation.
        """
        logger.info("entry: getSecrets")

        res = self.gsql("""
            USE GRAPH {}
            SHOW SECRET""".format(self.graphname), )
        ret = _parse_get_secrets(res)

        if logger.level == logging.DEBUG:
            logger.debug("return: " + str(ret))
        logger.info("exit: getSecrets")

        return ret

    def showSecrets(self) -> Dict[str, str]:
        """DEPRECATED

        Use `getSecrets()` instead.
        """
        warnings.warn("The `showSecrets()` function is deprecated; use `getSecrets()` instead.",
                      DeprecationWarning)

        return self.getSecrets()

    def createSecret(self, alias: str = "", withAlias: bool = False) -> Union[str, Dict[str, str]]:
        """Issues a `CREATE SECRET` GSQL statement and returns the secret generated by that statement.
            Secrets are unique strings that serve as credentials when generating authentication tokens.

        Args:
            alias:
                The alias of the secret. /
                The system will generate a random alias for the secret if the user does not provide
                an alias for that secret. Randomly generated aliases begin with
                `AUTO_GENERATED_ALIAS_` and include a random 7-character string.
            withAlias:
                Return the new secret as an `{"alias": "secret"}` dictionary. This can be useful if
                an alias was not provided, for example if it is auto-generated).

        Returns:
            The secret string.

        Notes:
            Generally, secrets are generated by the database administrator and
            used to generate a token. If you use this function, please consider reviewing your
            internal processes of granting access to TigerGraph instances. Normally, this function
            should not be necessary and should not be executable by generic users.
        """
        logger.info("entry: createSecret")
        if logger.level == logging.DEBUG:
            logger.debug("params: " + self._locals(locals()))

        res = self.gsql("""
            USE GRAPH {}
            CREATE SECRET {} """.format(self.graphname, alias))
        secret = _parse_create_secret(
            res, alias=alias, withAlias=withAlias)

        # Alias was not provided, let's find out the autogenerated one
        # done in createSecret since need to call self.getSecrets which is a possibly async function
        if withAlias and not alias:
            masked = secret[:3] + "****" + secret[-3:]
            secs = self.getSecrets()
            for (a, s) in secs.items():
                if s == masked:
                    secret = {a: secret}

        if logger.level == logging.DEBUG:
            logger.debug("return: " + str(secret))
        logger.info("exit: createSecret")

        return secret

    def dropSecret(self, alias: Union[str, list], ignoreErrors: bool = True) -> str:
        """Drops a secret.
            See https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_drop_a_secret

            Args:
                alias:
                    One or more alias(es) of secret(s).
                ignoreErrors:
                    Ignore errors arising from trying to drop non-existent secrets.

            Raises:
                `TigerGraphException` if a non-existent secret is attempted to be dropped (unless
                `ignoreErrors` is `True`). Re-raises other exceptions.
        """
        logger.info("entry: dropSecret")
        if logger.level == logging.DEBUG:
            logger.debug("params: " + self._locals(locals()))

        if isinstance(alias, str):
            alias = [alias]
        cmd = """
            USE GRAPH {}""".format(self.graphname)
        for a in alias:
            cmd += """
                DROP SECRET {}""".format(a)
        res = self.gsql(cmd)
        if "Failed to drop secrets" in res and not ignoreErrors:
            raise TigerGraphException(res)

        if logger.level == logging.DEBUG:
            logger.debug("return: " + str(res))
        logger.info("exit: dropSecret")

        return res

    def _token(self, secret: str = None, lifetime: int = None, token: str = None, _method: str = None) -> Union[tuple, str]:
        method, url, alt_url, authMode, data, alt_data = _prep_token_request(self.restppUrl,
                                                                             self.gsUrl,
                                                                             self.graphname,
                                                                             self.version,
                                                                             secret,
                                                                             lifetime,
                                                                             token)
        #  _method Used for delete and refresh token

        # method == GET when using old version since _prep_newToken() gets the method for getting a new token for a version
        if method == "GET":
            if _method:
                method = _method

            # Use TG < 3.5 format (no json data)
            res = self._req(method, url, authMode=authMode,
                            data=data, resKey=None)
            mainVer = 3
        else:
            if _method:
                method = _method

            # Try using TG 3.x endpoint first, if url not found then try <4.1 endpoint
            try:
                res = self._req(
                        method, alt_url, authMode=authMode, data=alt_data, resKey=None)
                mainVer = 3
            except:
                try:
                    res = self._req(method, url, authMode=authMode,
                                data=data, resKey=None, jsonData=True)
                    mainVer = 4
                except requests.exceptions.HTTPError as e:
                    if e.response.status_code == 404:
                        raise TigerGraphException(
                            "Error requesting token. Check if the connection's graphname is correct and that REST authentication is enabled.",
                            404
                        )
                    else:
                        raise e

        # uses mainVer instead of _versionGreaterThan4_0 since you need a token for verson checking
        return res, mainVer

    def getToken(self,
                 secret: str = None,
                 setToken: bool = True,
                 lifetime: int = None) -> Union[Tuple[str, str], str]:
        """Requests an authorization token.

        This function returns a token only if REST++ authentication is enabled. If not, an exception
        will be raised.
        See https://docs.tigergraph.com/admin/admin-guide/user-access-management/user-privileges-and-authentication#rest-authentication

        Args:
            secret (str, Optional):
                The secret (string) generated in GSQL using `CREATE SECRET`.
                See https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_create_a_secret
            setToken (bool, Optional):
                Set the connection's API token to the new value (default: `True`).
            lifetime (int, Optional):
                Duration of token validity (in seconds, default 30 days = 2,592,000 seconds).

        Returns:
            If your TigerGraph instance is running version <=3.10, the return value is 
            a tuple of `(<token>, <expiration_timestamp_unixtime>, <expiration_timestamp_ISO8601>)`.
            The return value can be ignored, as the token is automatically set for the connection after this call.

            If your TigerGraph instance is running version 4.0, the return value is a tuple of `(<token>, <expiration_timestamp_with_local_time>).

            [NOTE]
            The expiration timestamp's time zone might be different from your computer's local time
            zone.

        Raises:
            `TigerGraphException` if REST++ authentication is not enabled or if an authentication
            error occurred.

        Endpoint:
            - `POST /requesttoken` (In TigerGraph versions 3.x)
                See https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_request_a_token
            - `POST /gsql/v1/tokens` (In TigerGraph versions 4.x)
        """
        logger.info("entry: getToken")
        if logger.level == logging.DEBUG:
            logger.debug("params: " + self._locals(locals()))

        res, mainVer = self._token(secret, lifetime)
        token, auth_header = _parse_token_response(res,
                                                   setToken,
                                                   mainVer,
                                                   self.base64_credential
                                                )
        self.apiToken = token
        self.authHeader = auth_header
        self.authMode = "token"

        logger.info("exit: getToken")
        return token

    def refreshToken(self, secret: str = None, setToken: bool = True, lifetime: int = None, token: str = None) -> Union[Tuple[str, str], str]:
        """Extends a token's lifetime.

        This function works only if REST++ authentication is enabled. If not, an exception will be
        raised.
        See https://docs.tigergraph.com/admin/admin-guide/user-access-management/user-privileges-and-authentication#rest-authentication

        Args:
            secret:
                The secret (string) generated in GSQL using `CREATE SECRET`.
                See https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_create_a_secret
            token:
                The token requested earlier. If not specified, refreshes current connection's token.
            lifetime:
                Duration of token validity (in seconds, default 30 days = 2,592,000 seconds) from
                current system timestamp.

        Returns:
            A tuple of `(<token>, <expiration_timestamp_unixtime>, <expiration_timestamp_ISO8601>)`.
            The return value can be ignored. /
            New expiration timestamp will be now + lifetime seconds, _not_ current expiration
            timestamp + lifetime seconds.

            [NOTE]
            The expiration timestamp's time zone might be different from your computer's local time
            zone.


        Raises:
            `TigerGraphException` if REST++ authentication is not enabled, if an authentication error
            occurs, or if calling while using TigerGraph 4.x.

        Note:
            Not avaliable on TigerGraph version 4.x

        Endpoint:
            - `PUT /requesttoken`
                See https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_refresh_a_token
        """
        logger.info("entry: refreshToken")
        if logger.level == logging.DEBUG:
            logger.debug("params: " + self._locals(locals()))

        if self._version_greater_than_4_0():
            logger.info("exit: refreshToken")
            raise TigerGraphException(
                "Refreshing tokens is only supported on versions of TigerGraph <= 4.0.0.", 0)

        if not token:
            token = self.apiToken
        res, mainVer = self._token(secret, lifetime, token, "PUT")

        newToken = _parse_token_response(res, setToken, mainVer, self.base64_credential)

        logger.info("exit: refreshToken")

        return newToken

    def deleteToken(self, secret: str, token: str = None, skipNA: bool = False) -> bool:
        """Deletes a token.

        This function works only if REST++ authentication is enabled. If not, an exception will be
        raised.
        See https://docs.tigergraph.com/tigergraph-server/current/user-access/enabling-user-authentication#_enable_restpp_authentication

        Args:
            secret:
                The secret (string) generated in GSQL using `CREATE SECRET`.
                See https://docs.tigergraph.com/tigergraph-server/current/user-access/managing-credentials#_create_a_secret
            token:
                The token requested earlier. If not specified, deletes current connection's token,
                so be careful.
            skipNA:
                Don't raise an exception if the specified token does not exist.

        Returns:
            `True`, if deletion was successful, or if the token did not exist but `skipNA` was
            `True`.

        Raises:
            `TigerGraphException` if REST++ authentication is not enabled or an authentication error
            occurred, for example if the specified token does not exist.

        Endpoint:
            - `DELETE /requesttoken` (In TigerGraph version 3.x)
                See https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_delete_a_token
            - `DELETE /gsql/v1/tokens` (In TigerGraph version 4.x)
        """
        if not token:
            token = self.apiToken
        res, _ = self._token(secret, None, token, "DELETE")

        if not res["error"] or (res["code"] == "REST-3300" and skipNA):
            if logger.level == logging.DEBUG:
                logger.debug("return: " + str(True))
            logger.info("exit: deleteToken")

            return True

        raise TigerGraphException(
            res["message"], (res["code"] if "code" in res else None))

